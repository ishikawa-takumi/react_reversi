{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/takumi/work/react/my-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    children: showMark(props.value)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Square;\n\nclass Board extends React.Component {\n  renderSquare(x, y, nextPlayer) {\n    return /*#__PURE__*/_jsxDEV(Square, {\n      value: this.props.squares[y][x],\n      onClick: () => {\n        this.props.onClick(x, y);\n      }\n    }, x + y * TABLE_SIZE, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this);\n  }\n\n  render() {\n    const tableSquare = [...Array(8).keys()].map(row => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [...Array(8).keys()].map(col => this.renderSquare(col, row, this.props.currentPlayer))\n    }, row, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: tableSquare\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst TABLE_SIZE = 8;\nconst WHITE_MARK_ID = 1;\nconst BLACK_MARK_ID = 2;\nconst INIT_TABLE = [[null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null], [null, null, null, 1, 2, null, null, null], [null, null, null, 2, 1, null, null, null], [null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null]];\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: INIT_TABLE,\n        player: BLACK_MARK_ID\n      }],\n      stepNumber: 0,\n      currentPlayer: BLACK_MARK_ID,\n      winner: 0\n    };\n  }\n\n  getFlippableList(squares, x, y, playerId) {\n    const REV = -1;\n    const CURRENT = 0;\n    const NEXT = 1;\n    const DIRECTIONS = [REV, CURRENT, NEXT];\n    let flippableList = [];\n    DIRECTIONS.forEach(dy => {\n      DIRECTIONS.forEach(dx => {\n        if (dx === CURRENT && dy === CURRENT) {\n          return;\n        }\n\n        let tmp = [];\n        let depth = 0;\n\n        while (true) {\n          depth += 1;\n          const rx = x + dx * depth;\n          const ry = y + dy * depth;\n\n          if (rx < 0 || TABLE_SIZE <= rx || ry < 0 || TABLE_SIZE <= ry) {\n            break;\n          }\n\n          let value = squares[ry][rx];\n\n          if (value === null) {\n            break;\n          }\n\n          if (value === playerId) {\n            if (tmp.length !== 0) {\n              flippableList = flippableList.concat(tmp);\n            }\n\n            break;\n          } else {\n            tmp.push([rx, ry]);\n          }\n        }\n      });\n    });\n    return flippableList;\n  }\n\n  handleClick(x, y) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = this.state.history[history.length - 1];\n    const squares = current.squares.map(square => {\n      return square.slice();\n    });\n    const currentPlayer = current.player;\n\n    if (squares[y][x]) {\n      return;\n    }\n\n    const flippableList = this.getFlippableList(squares, x, y, currentPlayer);\n\n    if (flippableList.length === 0) {\n      return;\n    }\n\n    squares[y][x] = currentPlayer;\n    flippableList.forEach(position => {\n      squares[position[1]][position[0]] = currentPlayer;\n    });\n    const nextPlayer = this.getNextPlayer(squares, currentPlayer);\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n        player: nextPlayer === -1 ? currentPlayer : nextPlayer\n      }]),\n      stepNumber: history.length,\n      winner: nextPlayer === -1 ? currentPlayer : 0\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step\n    });\n  }\n\n  goBack() {\n    this.setState({\n      stepNumber: this.state.stepNumber > 0 ? this.state.stepNumber - 1 : this.state.stepNumber\n    });\n    console.log(this.state.stepNumber);\n  }\n\n  goForward() {\n    this.setState({\n      stepNumber: this.state.history.length - 1 > this.state.stepNumber ? this.state.stepNumber + 1 : this.state.stepNumber\n    });\n  }\n\n  getPoint(squares, playerId) {\n    let count = 0;\n\n    for (let y = 0; y < TABLE_SIZE; y++) {\n      for (let x = 0; x < TABLE_SIZE; x++) {\n        if (squares[y][x] === playerId) {\n          count += 1;\n        }\n      }\n    }\n\n    return count;\n  }\n\n  showPlayerPoints(squares) {\n    const firstPlayer = this.getPoint(squares, BLACK_MARK_ID);\n    const secondPlayer = this.getPoint(squares, WHITE_MARK_ID);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [showMark(BLACK_MARK_ID), \":\", firstPlayer, \" \", showMark(WHITE_MARK_ID), \":\", secondPlayer]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this);\n  }\n\n  getNextPlayer(squares, currentPlayer) {\n    let count = 0;\n    let empty_count = 0;\n    let nextPlayer = currentPlayer === BLACK_MARK_ID ? WHITE_MARK_ID : BLACK_MARK_ID;\n\n    for (let y = 0; y < TABLE_SIZE; y++) {\n      for (let x = 0; x < TABLE_SIZE; x++) {\n        if (squares[y][x] === null) {\n          let flippableList = this.getFlippableList(squares, x, y, nextPlayer);\n          count += flippableList.length;\n          empty_count += 1;\n        }\n      }\n    }\n\n    if (empty_count === 0) {\n      return -1;\n    } else if (count === 0) {\n      count = 0;\n      nextPlayer = nextPlayer === BLACK_MARK_ID ? WHITE_MARK_ID : BLACK_MARK_ID;\n\n      for (let y = 0; y < TABLE_SIZE; y++) {\n        for (let x = 0; x < TABLE_SIZE; x++) {\n          if (squares[y][x] === null) {\n            let flippableList = this.getFlippableList(squares, x, y, nextPlayer);\n            count += flippableList.length;\n          }\n        }\n      }\n\n      if (count === 0) {\n        return -1;\n      }\n    }\n\n    return nextPlayer;\n  }\n\n  showStepButton() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"step-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.goBack(),\n        className: \"step-button\",\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.goForward(),\n        className: \"step-button\",\n        children: \"Go\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this);\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const moves = history.map((step, move) => {\n      const desc = move ? 'go to move #' + move : 'go to game start';\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.jumpTo(move),\n          className: \"move-list\",\n          children: desc\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this)\n      }, move, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this);\n    });\n    let status;\n\n    if (this.state.winner) {\n      status = 'winner: ' + showMark(current.player);\n    } else {\n      status = 'next player: ' + showMark(current.player);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          squares: current.squares,\n          onClick: (x, y) => {\n            this.handleClick(x, y);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }, this), this.showPlayerPoints(current.squares), this.showStepButton()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this);\n  }\n\n} // ========================================\n\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 283,\n  columnNumber: 3\n}, this), document.getElementById('root'));\n\nfunction showMark(markId) {\n  if (markId === BLACK_MARK_ID) return '○';else if (markId === WHITE_MARK_ID) return '●';else return null;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Square\");","map":{"version":3,"sources":["/Users/takumi/work/react/my-app/src/index.js"],"names":["React","ReactDOM","Square","props","onClick","showMark","value","Board","Component","renderSquare","x","y","nextPlayer","squares","TABLE_SIZE","render","tableSquare","Array","keys","map","row","col","currentPlayer","WHITE_MARK_ID","BLACK_MARK_ID","INIT_TABLE","Game","constructor","state","history","player","stepNumber","winner","getFlippableList","playerId","REV","CURRENT","NEXT","DIRECTIONS","flippableList","forEach","dy","dx","tmp","depth","rx","ry","length","concat","push","handleClick","slice","current","square","position","getNextPlayer","setState","jumpTo","step","goBack","console","log","goForward","getPoint","count","showPlayerPoints","firstPlayer","secondPlayer","empty_count","showStepButton","moves","move","desc","status","document","getElementById","markId"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {showMark(props.value)}\n    </button>\n  );\n}\n  \nclass Board extends React.Component {\n  renderSquare(x,y,nextPlayer) {\n    return (\n      <Square \n        value={this.props.squares[y][x]} \n        key={x+y*TABLE_SIZE}\n        onClick={()=>{\n          this.props.onClick(x,y);\n\n         }}\n        />\n    );\n  }\n\n  render() {\n    const tableSquare = ([...Array(8).keys()]).map(row => (\n      <div className=\"board-row\" key={row}>\n        {[...Array(8).keys()].map(col => this.renderSquare(col, row, this.props.currentPlayer))}\n      </div>\n    ));\n    return (\n      <div>\n        {tableSquare}\n      </div>\n    );\n  }\n}\n\nconst TABLE_SIZE = 8;\nconst WHITE_MARK_ID = 1;\nconst BLACK_MARK_ID = 2;\nconst INIT_TABLE = \n[ \n  [null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null],\n  [null, null, null,    1,    2, null, null, null],\n  [null, null, null,    2,    1, null, null, null],\n  [null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null],\n];\n\nclass Game extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      history: [{\n        squares: INIT_TABLE,\n        player: BLACK_MARK_ID\n      }],\n      stepNumber: 0,\n      currentPlayer: BLACK_MARK_ID,\n      winner: 0\n    };\n  }\n\n  getFlippableList(squares, x, y, playerId) {\n    const REV = -1;\n    const CURRENT = 0;\n    const NEXT = 1;\n    const DIRECTIONS = [REV, CURRENT, NEXT];\n    let flippableList = [];\n    \n    DIRECTIONS.forEach((dy) => {\n      DIRECTIONS.forEach((dx) => {\n        \n        if( dx === CURRENT && dy === CURRENT ) {\n          return;\n        }\n        let tmp = [];\n        let depth = 0;\n        \n        while( true ) { \n          depth += 1;\n\n          const rx = x + dx*depth;\n          const ry = y + dy*depth;\n          if( rx < 0 || TABLE_SIZE <= rx || ry < 0 || TABLE_SIZE <= ry ) {\n            break;\n          }\n          let value = squares[ry][rx];\n\n          if( value === null ) {\n            break;\n          }\n\n          if( value === playerId ) {\n            if( tmp.length !== 0 ) {\n              flippableList = flippableList.concat(tmp);\n            }\n            break;\n          }\n          else {\n            tmp.push([rx, ry]);\n          }\n        }\n      });\n    });\n    return flippableList;\n  }\n\n  handleClick(x, y) {\n    const history = this.state.history.slice(0, this.state.stepNumber+1);\n    const current = this.state.history[history.length-1];\n    const squares = current.squares.map((square) => {\n      return square.slice();\n    });\n    const currentPlayer = current.player;\n    if( squares[y][x] ) {\n      return;\n    }\n\n    const flippableList = this.getFlippableList(squares, x, y, currentPlayer);\n\n    if( flippableList.length === 0 ) {\n      return;\n    }\n\n    squares[y][x] = currentPlayer;\n    flippableList.forEach((position) => {\n      squares[position[1]][position[0]] = currentPlayer;\n    });\n\n    const nextPlayer = this.getNextPlayer(squares, currentPlayer);\n\n    \n    this.setState({\n      history: history.concat([{\n        squares: squares,\n        player: nextPlayer===-1 ? currentPlayer : nextPlayer\n      }]),\n      stepNumber: history.length,\n      winner: nextPlayer===-1 ? currentPlayer : 0\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n    });\n  }\n\n  goBack() {\n    this.setState({\n      stepNumber: this.state.stepNumber > 0 ? this.state.stepNumber - 1 : this.state.stepNumber\n    });\n    console.log(this.state.stepNumber);\n  }\n\n  goForward() {\n    this.setState({\n      stepNumber: this.state.history.length-1 > this.state.stepNumber ? this.state.stepNumber+1 : this.state.stepNumber\n    });\n  }\n\n  getPoint(squares, playerId) {\n    let count = 0;\n    for(let y=0; y<TABLE_SIZE; y++) {        \n      for(let x=0; x<TABLE_SIZE; x++) {        \n        if( squares[y][x] === playerId ) {\n          count += 1;\n        }\n      }\n    }\n    return count;\n  }\n\n  showPlayerPoints(squares) {\n    const firstPlayer = this.getPoint(squares, BLACK_MARK_ID);\n    const secondPlayer = this.getPoint(squares, WHITE_MARK_ID);\n\n    return(\n      <div>{showMark(BLACK_MARK_ID)}:{firstPlayer} {showMark(WHITE_MARK_ID)}:{secondPlayer}</div>\n    )\n  }\n\n  getNextPlayer(squares, currentPlayer) {\n    let count = 0;\n    let empty_count = 0;\n    let nextPlayer = (currentPlayer===BLACK_MARK_ID ? WHITE_MARK_ID : BLACK_MARK_ID);\n\n    for(let y=0; y<TABLE_SIZE; y++) {\n      for(let x=0; x<TABLE_SIZE; x++) {\n        if( squares[y][x] === null ) {\n          let flippableList = this.getFlippableList(squares, x, y, nextPlayer);\n          count += flippableList.length;\n          empty_count += 1;\n        }\n      }\n    }\n\n    if( empty_count === 0 ) {\n      return -1;\n    }\n    else if(count === 0) {\n      count = 0;\n      nextPlayer = (nextPlayer===BLACK_MARK_ID ? WHITE_MARK_ID : BLACK_MARK_ID);\n      for(let y=0; y<TABLE_SIZE; y++) {\n        for(let x=0; x<TABLE_SIZE; x++) {\n          if( squares[y][x] === null ) {\n            let flippableList = this.getFlippableList(squares, x, y, nextPlayer);\n            count += flippableList.length;\n          }\n        }\n      }\n      if( count === 0 ) {\n        return -1;\n      }\n    }\n    return nextPlayer;\n  }\n\n  showStepButton() {\n    return (\n      <div className=\"step-buttons\">\n        <button onClick={()=>this.goBack()} className=\"step-button\">Back</button>\n        <button onClick={()=>this.goForward()} className=\"step-button\">Go</button>\n      </div>\n    );\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n\n    const moves = history.map((step, move) => {\n      const desc = move ?\n      'go to move #' + move :\n      'go to game start';\n      return (\n        <li key={move}>\n          <button onClick={()=>this.jumpTo(move)} className=\"move-list\">{desc}</button>\n        </li>\n      );\n    });\n\n    let status;\n    if(this.state.winner) {\n      status = 'winner: ' + showMark(current.player);\n    }else {\n      status = 'next player: ' + showMark(current.player);\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board \n            squares={current.squares}\n            onClick={(x,y)=>{\n              this.handleClick(x,y);\n              }}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          {this.showPlayerPoints(current.squares)}\n          {/* <ol>{moves}</ol> */}\n          {this.showStepButton()}\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\nfunction showMark( markId ) {\n  if(markId === BLACK_MARK_ID)\n    return '○';\n  else if (markId === WHITE_MARK_ID)\n    return '●';\n  else \n    return null\n}"]},"metadata":{},"sourceType":"module"}