{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/takumi/work/react/my-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    children: showMark(props.value)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Square;\n\nclass Board extends React.Component {\n  renderSquare(x, y) {\n    return /*#__PURE__*/_jsxDEV(Square, {\n      value: this.props.squares[y][x],\n      onClick: () => {\n        this.props.onClick(x, y);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this);\n  }\n\n  render() {\n    const tableSquare = [...Array(8).keys()].map(row => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [...Array(8).keys()].map(col => this.renderSquare(col, row))\n    }, row, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: tableSquare\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst TABLE_SIZE = 8;\nconst WHITE_MARK_ID = 1;\nconst BLACK_MARK_ID = 2;\nconst INIT_TABLE = [[null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null], [null, null, null, 1, 2, null, null, null], [null, null, null, 2, 1, null, null, null], [null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null]];\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: INIT_TABLE\n      }],\n      stepNumber: 0,\n      xIsNext: true\n    };\n  }\n\n  getFlippableList(squares, x, y, player_id) {\n    const REV = -1;\n    const CURRENT = 0;\n    const NEXT = 1;\n    const DIRECTIONS = [REV, CURRENT, NEXT];\n    let flippableList = [];\n    DIRECTIONS.forEach(dy => {\n      DIRECTIONS.forEach(dx => {\n        if (dx === CURRENT && dy === CURRENT) {\n          return;\n        }\n\n        let tmp = [];\n        let depth = 0;\n\n        while (true) {\n          depth += 1;\n          const rx = x + dx * depth;\n          const ry = y + dy * depth;\n\n          if (rx < 0 || TABLE_SIZE <= rx || ry < 0 || TABLE_SIZE <= ry) {\n            break;\n          }\n\n          let value = squares[ry][rx];\n\n          if (value === null) {\n            break;\n          }\n\n          if (value === player_id) {\n            if (tmp.length !== 0) {\n              flippableList = flippableList.concat(tmp);\n            }\n\n            break;\n          } else {\n            tmp.push([rx, ry]);\n          }\n        }\n      });\n    });\n    return flippableList;\n  }\n\n  handleClick(x, y) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = this.state.history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (squares[y][x]) {\n      return;\n    }\n\n    const currentPlayer = this.state.xIsNext ? WHITE_MARK_ID : BLACK_MARK_ID;\n    const flippableList = this.getFlippableList(squares, x, y, currentPlayer);\n\n    if (flippableList.length === 0) {\n      return;\n    }\n\n    squares[y][x] = currentPlayer;\n    flippableList.forEach(position => {\n      squares[position[1]][position[0]] = currentPlayer;\n    });\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n  }\n\n  getPoint(squares, playerId) {\n    let count = 0;\n\n    for (let i = 0; i < squares.length; i++) {\n      if (squares[i] === playerId) {\n        count += 1;\n      }\n    }\n\n    return count;\n  }\n\n  showPlayerPoints(squares) {\n    firstPlayer = this.getPoint(squares, BLACK_MARK_ID);\n    secondPlayer = this.getPoint(squares, WHITE_MARK_ID);\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = false;\n    const moves = history.map((step, move) => {\n      const desc = move ? 'go to move #' + move : 'go to game start';\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.jumpTo(move),\n          className: \"move-list\",\n          children: desc\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this)\n      }, move, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this);\n    });\n    let status;\n\n    if (winner) {\n      status = 'winner: ' + winner;\n    } else {\n      const nextplayer = this.state.xIsNext ? WHITE_MARK_ID : BLACK_MARK_ID;\n      console.log(\"🚀 ~ file: index.js ~ line 172 ~ Game ~ render ~ nextplayer\", nextplayer);\n      status = 'next player: ' + showMark(nextplayer);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          squares: current.squares,\n          onClick: (x, y) => {\n            this.handleClick(x, y);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n          children: moves\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this);\n  }\n\n} // ========================================\n\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 212,\n  columnNumber: 3\n}, this), document.getElementById('root'));\n\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n}\n\nfunction showMark(markId) {\n  if (markId === BLACK_MARK_ID) return '○';else if (markId === WHITE_MARK_ID) return '●';else return null;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Square\");","map":{"version":3,"sources":["/Users/takumi/work/react/my-app/src/index.js"],"names":["React","ReactDOM","Square","props","onClick","showMark","value","Board","Component","renderSquare","x","y","squares","render","tableSquare","Array","keys","map","row","col","TABLE_SIZE","WHITE_MARK_ID","BLACK_MARK_ID","INIT_TABLE","Game","constructor","state","history","stepNumber","xIsNext","getFlippableList","player_id","REV","CURRENT","NEXT","DIRECTIONS","flippableList","forEach","dy","dx","tmp","depth","rx","ry","length","concat","push","handleClick","slice","current","currentPlayer","position","setState","jumpTo","step","getPoint","playerId","count","i","showPlayerPoints","firstPlayer","secondPlayer","winner","moves","move","desc","status","nextplayer","console","log","document","getElementById","calculateWinner","lines","a","b","c","markId"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {showMark(props.value)}\n    </button>\n  );\n}\n  \nclass Board extends React.Component {\n  renderSquare(x,y) {\n    return (\n      <Square \n        value={this.props.squares[y][x]} \n         onClick={()=>{\n           this.props.onClick(x,y);\n\n         }}\n        />\n    );\n  }\n\n  render() {\n    const tableSquare = ([...Array(8).keys()]).map(row => (\n      <div className=\"board-row\" key={row}>\n        {[...Array(8).keys()].map(col => this.renderSquare(col, row))}\n      </div>\n    ));\n    return (\n      <div>\n        {tableSquare}\n      </div>\n    );\n  }\n}\n\nconst TABLE_SIZE = 8;\nconst WHITE_MARK_ID = 1;\nconst BLACK_MARK_ID = 2;\nconst INIT_TABLE = \n[ \n  [null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null],\n  [null, null, null,    1,    2, null, null, null],\n  [null, null, null,    2,    1, null, null, null],\n  [null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null],\n];\n\nclass Game extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      history: [{\n        squares: INIT_TABLE\n      }],\n      stepNumber: 0,\n      xIsNext: true\n    };\n  }\n\n  getFlippableList(squares, x, y, player_id) {\n    const REV = -1;\n    const CURRENT = 0;\n    const NEXT = 1;\n    const DIRECTIONS = [REV, CURRENT, NEXT];\n    let flippableList = [];\n    \n    DIRECTIONS.forEach((dy) => {\n      DIRECTIONS.forEach((dx) => {\n        \n        if( dx === CURRENT && dy === CURRENT ) {\n          return;\n        }\n        let tmp = [];\n        let depth = 0;\n        \n        while( true ) { \n          depth += 1;\n\n          const rx = x + dx*depth;\n          const ry = y + dy*depth;\n          if( rx < 0 || TABLE_SIZE <= rx || ry < 0 || TABLE_SIZE <= ry ) {\n            break;\n          }\n          let value = squares[ry][rx];\n\n          if( value === null ) {\n            break;\n          }\n\n          if( value === player_id ) {\n            if( tmp.length !== 0 ) {\n              flippableList = flippableList.concat(tmp);\n            }\n            break;\n          }\n          else {\n            tmp.push([rx, ry]);\n          }\n        }\n      });\n    });\n    return flippableList;\n  }\n\n  handleClick(x, y) {\n    const history = this.state.history.slice(0, this.state.stepNumber+1);\n    const current = this.state.history[history.length-1];\n    const squares = current.squares.slice();\n    if( squares[y][x] ) {\n      return;\n    }\n\n    const currentPlayer = this.state.xIsNext ? WHITE_MARK_ID : BLACK_MARK_ID;\n    const flippableList = this.getFlippableList(squares, x, y, currentPlayer);\n\n    if( flippableList.length === 0 ) {\n      return;\n    }\n\n    squares[y][x] = currentPlayer;\n    flippableList.forEach((position) => {\n      squares[position[1]][position[0]] = currentPlayer;\n    });\n\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0\n    });\n  }\n\n  getPoint(squares, playerId) {\n    let count = 0;\n    for(let i=0; i<squares.length; i++) {        \n      if( squares[i] === playerId ) {\n        count += 1;\n      }\n    }\n    return count;\n  }\n\n  showPlayerPoints(squares) {\n    firstPlayer = this.getPoint(squares, BLACK_MARK_ID);\n    secondPlayer = this.getPoint(squares, WHITE_MARK_ID);\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = false;\n\n    const moves = history.map((step, move) => {\n      const desc = move ?\n      'go to move #' + move :\n      'go to game start';\n      return (\n        <li key={move}>\n          <button onClick={()=>this.jumpTo(move)} className=\"move-list\">{desc}</button>\n        </li>\n      );\n    });\n    let status;\n    if( winner ) {\n      status = 'winner: ' + winner;\n    }\n    else {\n      const nextplayer = (this.state.xIsNext ? WHITE_MARK_ID : BLACK_MARK_ID);\n      console.log(\"🚀 ~ file: index.js ~ line 172 ~ Game ~ render ~ nextplayer\", nextplayer);\n      status = 'next player: ' + showMark(nextplayer);\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board \n            squares={current.squares}\n            onClick={(x,y)=>{\n              this.handleClick(x,y);\n              }}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n\n  for( let i=0; i<lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if( squares[a] && squares[a] === squares[b] && squares[a] === squares[c] ) {\n      return squares[a];\n    }\n  }\n  return null;\n}\nfunction showMark( markId ) {\n  if(markId === BLACK_MARK_ID)\n    return '○';\n  else if (markId === WHITE_MARK_ID)\n    return '●';\n  else \n    return null\n}"]},"metadata":{},"sourceType":"module"}