{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/takumi/work/react/my-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    children: showMark(props.value)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Square;\n\nclass Board extends React.Component {\n  renderSquare(x, y, nextPlayer) {\n    return /*#__PURE__*/_jsxDEV(Square, {\n      value: this.props.squares[y][x],\n      onClick: () => {\n        this.props.onClick(x, y, nextPlayer);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this);\n  }\n\n  render() {\n    const tableSquare = [...Array(8).keys()].map(row => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [...Array(8).keys()].map(col => this.renderSquare(col, row, this.props.nextPlayer))\n    }, row, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: tableSquare\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst TABLE_SIZE = 8;\nconst WHITE_MARK_ID = 1;\nconst BLACK_MARK_ID = 2;\nconst INIT_TABLE = [[null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null], [null, null, null, 1, 2, null, null, null], [null, null, null, 2, 1, null, null, null], [null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null]];\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: INIT_TABLE\n      }],\n      stepNumber: 0,\n      currentPlayer: BLACK_MARK_ID\n    };\n  }\n\n  getFlippableList(squares, x, y, playerId) {\n    const REV = -1;\n    const CURRENT = 0;\n    const NEXT = 1;\n    const DIRECTIONS = [REV, CURRENT, NEXT];\n    let flippableList = [];\n    DIRECTIONS.forEach(dy => {\n      DIRECTIONS.forEach(dx => {\n        if (dx === CURRENT && dy === CURRENT) {\n          return;\n        }\n\n        let tmp = [];\n        let depth = 0;\n\n        while (true) {\n          depth += 1;\n          const rx = x + dx * depth;\n          const ry = y + dy * depth;\n\n          if (rx < 0 || TABLE_SIZE <= rx || ry < 0 || TABLE_SIZE <= ry) {\n            break;\n          }\n\n          let value = squares[ry][rx];\n\n          if (value === null) {\n            break;\n          }\n\n          if (value === playerId) {\n            if (tmp.length !== 0) {\n              flippableList = flippableList.concat(tmp);\n            }\n\n            break;\n          } else {\n            tmp.push([rx, ry]);\n          }\n        }\n      });\n    });\n    return flippableList;\n  }\n\n  handleClick(x, y, currentPlayer) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = this.state.history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (squares[y][x]) {\n      return;\n    }\n\n    const flippableList = this.getFlippableList(squares, x, y, currentPlayer);\n\n    if (flippableList.length === 0) {\n      return;\n    }\n\n    squares[y][x] = currentPlayer;\n    flippableList.forEach(position => {\n      squares[position[1]][position[0]] = currentPlayer;\n    });\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      stepNumber: history.length,\n      xIsNext: currentPlayer === BLACK_MARK_ID ? true : false\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: BLACK_MARK_ID\n    });\n  }\n\n  getPoint(squares, playerId) {\n    let count = 0;\n\n    for (let y = 0; y < TABLE_SIZE; y++) {\n      for (let x = 0; x < TABLE_SIZE; x++) {\n        if (squares[y][x] === playerId) {\n          count += 1;\n        }\n      }\n    }\n\n    return count;\n  }\n\n  showPlayerPoints(squares) {\n    const firstPlayer = this.getPoint(squares, BLACK_MARK_ID);\n    const secondPlayer = this.getPoint(squares, WHITE_MARK_ID);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [showMark(BLACK_MARK_ID), \":\", firstPlayer, \" \", showMark(WHITE_MARK_ID), \":\", secondPlayer]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this);\n  }\n\n  getNextPlayer(squares) {\n    let count = 0;\n    let currentPlayer = this.state.xIsNext ? WHITE_MARK_ID : BLACK_MARK_ID;\n\n    for (let y = 0; y < TABLE_SIZE; y++) {\n      for (let x = 0; x < TABLE_SIZE; x++) {\n        if (squares[y][x] !== null) {\n          let flippableList = this.getFlippableList(squares, x, y, currentPlayer);\n          count += flippableList.length;\n        }\n      }\n    }\n\n    console.log(\"üöÄ ~ file: index.js ~ line 183 ~ Game ~ getNextPlayer ~ count\", count);\n\n    if (count === 0) {\n      return !this.state.xIsNext ? WHITE_MARK_ID : BLACK_MARK_ID;\n    } else {\n      return this.state.xIsNext ? WHITE_MARK_ID : BLACK_MARK_ID;\n    }\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const moves = history.map((step, move) => {\n      const desc = move ? 'go to move #' + move : 'go to game start';\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.jumpTo(move),\n          className: \"move-list\",\n          children: desc\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this)\n      }, move, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this);\n    });\n    console.log(\"AA\");\n    let status;\n    const nextplayer = this.getNextPlayer(current.squares);\n    status = 'next player: ' + showMark(nextplayer);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          squares: current.squares,\n          currentPlayer: nextplayer,\n          onClick: (x, y, currentPlayer) => {\n            this.handleClick(x, y, currentPlayer);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: this.showPlayerPoints(current.squares)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n          children: moves\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this);\n  }\n\n} // ========================================\n\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 234,\n  columnNumber: 3\n}, this), document.getElementById('root'));\n\nfunction showMark(markId) {\n  if (markId === BLACK_MARK_ID) return '‚óã';else if (markId === WHITE_MARK_ID) return '‚óè';else return null;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Square\");","map":{"version":3,"sources":["/Users/takumi/work/react/my-app/src/index.js"],"names":["React","ReactDOM","Square","props","onClick","showMark","value","Board","Component","renderSquare","x","y","nextPlayer","squares","render","tableSquare","Array","keys","map","row","col","TABLE_SIZE","WHITE_MARK_ID","BLACK_MARK_ID","INIT_TABLE","Game","constructor","state","history","stepNumber","currentPlayer","getFlippableList","playerId","REV","CURRENT","NEXT","DIRECTIONS","flippableList","forEach","dy","dx","tmp","depth","rx","ry","length","concat","push","handleClick","slice","current","position","setState","xIsNext","jumpTo","step","getPoint","count","showPlayerPoints","firstPlayer","secondPlayer","getNextPlayer","console","log","moves","move","desc","status","nextplayer","document","getElementById","markId"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {showMark(props.value)}\n    </button>\n  );\n}\n  \nclass Board extends React.Component {\n  renderSquare(x,y,nextPlayer) {\n    return (\n      <Square \n        value={this.props.squares[y][x]} \n         onClick={()=>{\n           this.props.onClick(x,y,nextPlayer);\n\n         }}\n        />\n    );\n  }\n\n  render() {\n    const tableSquare = ([...Array(8).keys()]).map(row => (\n      <div className=\"board-row\" key={row}>\n        {[...Array(8).keys()].map(col => this.renderSquare(col, row, this.props.nextPlayer))}\n      </div>\n    ));\n    return (\n      <div>\n        {tableSquare}\n      </div>\n    );\n  }\n}\n\nconst TABLE_SIZE = 8;\nconst WHITE_MARK_ID = 1;\nconst BLACK_MARK_ID = 2;\nconst INIT_TABLE = \n[ \n  [null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null],\n  [null, null, null,    1,    2, null, null, null],\n  [null, null, null,    2,    1, null, null, null],\n  [null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null],\n];\n\nclass Game extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      history: [{\n        squares: INIT_TABLE\n      }],\n      stepNumber: 0,\n      currentPlayer: BLACK_MARK_ID\n    };\n  }\n\n  getFlippableList(squares, x, y, playerId) {\n    const REV = -1;\n    const CURRENT = 0;\n    const NEXT = 1;\n    const DIRECTIONS = [REV, CURRENT, NEXT];\n    let flippableList = [];\n    \n    DIRECTIONS.forEach((dy) => {\n      DIRECTIONS.forEach((dx) => {\n        \n        if( dx === CURRENT && dy === CURRENT ) {\n          return;\n        }\n        let tmp = [];\n        let depth = 0;\n        \n        while( true ) { \n          depth += 1;\n\n          const rx = x + dx*depth;\n          const ry = y + dy*depth;\n          if( rx < 0 || TABLE_SIZE <= rx || ry < 0 || TABLE_SIZE <= ry ) {\n            break;\n          }\n          let value = squares[ry][rx];\n\n          if( value === null ) {\n            break;\n          }\n\n          if( value === playerId ) {\n            if( tmp.length !== 0 ) {\n              flippableList = flippableList.concat(tmp);\n            }\n            break;\n          }\n          else {\n            tmp.push([rx, ry]);\n          }\n        }\n      });\n    });\n    return flippableList;\n  }\n\n  handleClick(x, y, currentPlayer) {\n    const history = this.state.history.slice(0, this.state.stepNumber+1);\n    const current = this.state.history[history.length-1];\n    const squares = current.squares.slice();\n    if( squares[y][x] ) {\n      return;\n    }\n\n    const flippableList = this.getFlippableList(squares, x, y, currentPlayer);\n\n    if( flippableList.length === 0 ) {\n      return;\n    }\n\n    squares[y][x] = currentPlayer;\n    flippableList.forEach((position) => {\n      squares[position[1]][position[0]] = currentPlayer;\n    });\n\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      stepNumber: history.length,\n      xIsNext: (currentPlayer===BLACK_MARK_ID ? true:false)\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: BLACK_MARK_ID\n    });\n  }\n\n  getPoint(squares, playerId) {\n    let count = 0;\n    for(let y=0; y<TABLE_SIZE; y++) {        \n      for(let x=0; x<TABLE_SIZE; x++) {        \n        if( squares[y][x] === playerId ) {\n          count += 1;\n        }\n      }\n    }\n    return count;\n  }\n\n  showPlayerPoints(squares) {\n    const firstPlayer = this.getPoint(squares, BLACK_MARK_ID);\n    const secondPlayer = this.getPoint(squares, WHITE_MARK_ID);\n\n    return(\n      <div>{showMark(BLACK_MARK_ID)}:{firstPlayer} {showMark(WHITE_MARK_ID)}:{secondPlayer}</div>\n    )\n  }\n\n  getNextPlayer(squares) {\n    let count = 0;\n    let currentPlayer = (this.state.xIsNext ? WHITE_MARK_ID : BLACK_MARK_ID);\n    for(let y=0; y<TABLE_SIZE; y++) {\n      for(let x=0; x<TABLE_SIZE; x++) {\n        if( squares[y][x] !== null ) {\n          let flippableList = this.getFlippableList(squares, x, y, currentPlayer);\n          count += flippableList.length;\n        }\n      }\n    }\n    \n    console.log(\"üöÄ ~ file: index.js ~ line 183 ~ Game ~ getNextPlayer ~ count\", count);\n    if(count === 0) {\n      return (!this.state.xIsNext ? WHITE_MARK_ID : BLACK_MARK_ID);\n    }else{\n      return (this.state.xIsNext ? WHITE_MARK_ID : BLACK_MARK_ID);\n    }\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n\n    const moves = history.map((step, move) => {\n      const desc = move ?\n      'go to move #' + move :\n      'go to game start';\n      return (\n        <li key={move}>\n          <button onClick={()=>this.jumpTo(move)} className=\"move-list\">{desc}</button>\n        </li>\n      );\n    });\n\n    console.log(\"AA\");\n    let status;\n    const nextplayer = this.getNextPlayer(current.squares);\n    status = 'next player: ' + showMark(nextplayer);\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board \n            squares={current.squares}\n            currentPlayer={nextplayer}\n            onClick={(x,y,currentPlayer)=>{\n              this.handleClick(x,y,currentPlayer);\n              }}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <div>{this.showPlayerPoints(current.squares)}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\nfunction showMark( markId ) {\n  if(markId === BLACK_MARK_ID)\n    return '‚óã';\n  else if (markId === WHITE_MARK_ID)\n    return '‚óè';\n  else \n    return null\n}"]},"metadata":{},"sourceType":"module"}