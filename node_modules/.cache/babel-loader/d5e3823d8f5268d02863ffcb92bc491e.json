{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/takumi/work/react/my-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    children: props.showMark(props.value)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Square;\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return /*#__PURE__*/_jsxDEV(Square, {\n      value: this.props.squares[i],\n      showMark: this.props.showMark,\n      onClick: () => {\n        this.props.onClick(i);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this);\n  }\n\n  render() {\n    const tableSquare = [...Array(8).keys()].map(row => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [...Array(8).keys()].map(col => this.renderSquare(col + row * this.props.cols))\n    }, row, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: tableSquare\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst TABLE_ROWS = 8;\nconst TABLE_COLS = 8;\nconst NUM_SQUARES = TABLE_COLS * TABLE_ROWS;\nconst WHITE_MARK_ID = 1;\nconst BLACK_MARK_ID = 2;\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(NUM_SQUARES).fill(null)\n      }],\n      stepNumber: 0,\n      xIsNext: true\n    };\n  }\n\n  showMark(markId) {\n    return markId === BLACK_MARK_ID ? '○' : '●';\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = this.state.history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? WHITE_MARK_ID : BLACK_MARK_ID;\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n    const moves = history.map((step, move) => {\n      const desc = move ? 'go to move #' + move : 'go to game start';\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.jumpTo(move),\n          className: \"move-list\",\n          children: desc\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)\n      }, move, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this);\n    });\n    let status;\n\n    if (winner) {\n      status = 'winner: ' + winner;\n    } else {\n      const nextplayer = this.props.xIsNnext ? this.showMark(BLACK_MARK_ID) : this.showMark(WHITE_MARK_ID);\n      status = 'next player: ' + nextplayer;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          squares: current.squares,\n          rows: TABLE_COLS,\n          cols: TABLE_ROWS,\n          showMark: this.showMark,\n          onClick: i => {\n            this.handleClick(i);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n          children: moves\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this);\n  }\n\n} // ========================================\n\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 138,\n  columnNumber: 3\n}, this), document.getElementById('root'));\n\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Square\");","map":{"version":3,"sources":["/Users/takumi/work/react/my-app/src/index.js"],"names":["React","ReactDOM","Square","props","onClick","showMark","value","Board","Component","renderSquare","i","squares","render","tableSquare","Array","keys","map","row","col","cols","TABLE_ROWS","TABLE_COLS","NUM_SQUARES","WHITE_MARK_ID","BLACK_MARK_ID","Game","constructor","state","history","fill","stepNumber","xIsNext","markId","handleClick","slice","current","length","calculateWinner","setState","concat","jumpTo","step","winner","moves","move","desc","status","nextplayer","xIsNnext","document","getElementById","lines","a","b","c"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.showMark(props.value)}\n    </button>\n  );\n}\n  \nclass Board extends React.Component {\n  renderSquare(i) {\n    return (\n      <Square \n        value={this.props.squares[i]} \n        showMark={this.props.showMark}\n         onClick={()=>{\n           this.props.onClick(i);\n\n         }}\n        />\n    );\n  }\n\n  render() {\n    const tableSquare = ([...Array(8).keys()]).map(row => (\n      <div className=\"board-row\" key={row}>\n        {[...Array(8).keys()].map(col => this.renderSquare(col + row * this.props.cols))}\n      </div>\n    ));\n    return (\n      <div>\n        {tableSquare}\n      </div>\n    );\n  }\n}\n\nconst TABLE_ROWS = 8;\nconst TABLE_COLS = 8;\nconst NUM_SQUARES = TABLE_COLS*TABLE_ROWS;\nconst WHITE_MARK_ID = 1;\nconst BLACK_MARK_ID = 2;\n\nclass Game extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      history: [{\n        squares: Array(NUM_SQUARES).fill(null)\n      }],\n      stepNumber: 0,\n      xIsNext: true\n    };\n  }\n  showMark( markId ) {\n    return (markId === BLACK_MARK_ID ? '○' : '●');\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber+1);\n    const current = this.state.history[history.length-1];\n    const squares = current.squares.slice();\n    if( calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? WHITE_MARK_ID : BLACK_MARK_ID;\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0\n    });\n  }\n\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n\n    const moves = history.map((step, move) => {\n      const desc = move ?\n      'go to move #' + move :\n      'go to game start';\n      return (\n        <li key={move}>\n          <button onClick={()=>this.jumpTo(move)} className=\"move-list\">{desc}</button>\n        </li>\n      );\n    });\n    let status;\n    if( winner ) {\n      status = 'winner: ' + winner;\n    }\n    else {\n      const nextplayer = (this.props.xIsNnext ? this.showMark(BLACK_MARK_ID): this.showMark(WHITE_MARK_ID));\n      status = 'next player: ' + nextplayer;\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board \n            squares={current.squares}\n            rows={TABLE_COLS}\n            cols={TABLE_ROWS}\n            showMark={this.showMark}\n            onClick={(i)=>{\n              this.handleClick(i);\n              }}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n\n  for( let i=0; i<lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if( squares[a] && squares[a] === squares[b] && squares[a] === squares[c] ) {\n      return squares[a];\n    }\n  }\n  return null;\n}"]},"metadata":{},"sourceType":"module"}